package textprotogen

import (
	"flag"
	"fmt"
	"os"

	"github.com/bookweb/textproto-gen/internal/gen"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"

	"github.com/go-faster/errors"
)

func Run() error {
	flagSet := flag.NewFlagSet(os.Args[0], flag.ExitOnError)

	version := flagSet.Bool("version", false, "Version")
	standalone := flagSet.Bool("standalone", false, "Standalone mode")
	title := flagSet.String("title", "", "Title")
	description := flagSet.String("description", "", "Description")
	filename := flagSet.String("filename", "testdata", "Filename")

	if err := flagSet.Parse(os.Args[1:]); err != nil {
		return errors.Wrap(err, "parse args")
	}

	if *version {
		fmt.Println("1.1.0")
	} else if *standalone {

	} else {
		opts := protogen.Options{
			ParamFunc: flagSet.Set,
		}

		p := func(plugin *protogen.Plugin) error {
			plugin.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)

			g, err := gen.NewGenerator(
				plugin.Files,
				gen.WithTitle(*title),
				gen.WithDescription(*description),
			)
			if err != nil {
				return err
			}

			bytes := make([]byte, 0)
			// bytes = append(bytes, []byte("# generated by protoc-gen-textproto. DO NOT EDIT\r\n\r\n")...)

			textprotoBytes, err := g.TextProto()
			if err != nil {
				return err
			}

			bytes = append(bytes, textprotoBytes...)

			gf := plugin.NewGeneratedFile(fmt.Sprintf("%s.textproto", *filename), "")
			if _, err := gf.Write(bytes); err != nil {
				return err
			}

			return nil
		}

		opts.Run(p)
	}

	return nil
}
